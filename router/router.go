package router

import (
	"apiserver/handler/ovn"
	"net/http"

	_ "apiserver/docs" // docs is generated by Swag CLI, you have to import it.
	"apiserver/handler/sd"
	"apiserver/handler/user"
	"apiserver/router/middleware"

	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {
	// Middlewares.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)
	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})

	// swagger api docs
	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// pprof router
	pprof.Register(g)

	// api for authentication functionalities
	g.POST("/login", user.Login)

	// The user handlers, requiring authentication
	u := g.Group("/v1/user")
	u.Use(middleware.AuthMiddleware())
	{
		u.POST("", user.Create)
		u.DELETE("/:id", user.Delete)
		u.PUT("/:id", user.Update)
		u.GET("", user.List)
		u.GET("/:username", user.Get)
	}

	// The health check handlers
	svcd := g.Group("/sd")
	{
		svcd.GET("/health", sd.HealthCheck)
		svcd.GET("/disk", sd.DiskCheck)
		svcd.GET("/cpu", sd.CPUCheck)
		svcd.GET("/ram", sd.RAMCheck)
	}

	// API For OVN Logical switch
	ovnLs := g.Group("/api/v1/esix/ovn/LS")
	ovnLs.Use(middleware.AuthMiddleware())
	{
		ovnLs.PUT("/:name", ovn.LSAdd)
		ovnLs.DELETE("/:name", ovn.LSDel)
		ovnLs.GET("/:name", ovn.LSGet)
		ovnLs.GET("", ovn.LSList)
	}

	ovnLsp := g.Group("/api/v1/esix/ovn/LSP")
	ovnLsp.Use(middleware.AuthMiddleware())
	{
		ovnLsp.PUT("/:name/:port", ovn.LSPAdd)
		ovnLsp.GET("/:name", ovn.LSPList)
		ovnLsp.DELETE("/:port", ovn.LSPDel)
		ovnLsp.POST("/Security/:name",ovn.LSPSetSecurity)
		ovnLsp.POST("/Address/:name",ovn.LSPSetAddress)
	}

	ovnLsExt := g.Group("/api/v1/esix/ovn/LsExt")
	ovnLsExt.Use(middleware.AuthMiddleware())
	{
		ovnLsExt.PUT("/:name", ovn.LsExtIdsAdd)
		ovnLsExt.DELETE("/:name", ovn.LsExtIdsDel)
	}

	ovnACL := g.Group("/api/v1/esix/ovn/ACL")
	ovnACL.Use(middleware.AuthMiddleware())
	{
		ovnACL.POST("/:name", ovn.ACLAdd)
		ovnACL.DELETE("/:name", ovn.ACLDel)
		ovnACL.GET("/:name", ovn.ACLList)
	}

	ovnAS := g.Group("/api/v1/esix/ovn/AS")
	ovnAS.Use(middleware.AuthMiddleware())
	{
		ovnAS.PUT("/:name", ovn.ASAdd)
		ovnAS.GET("/:name", ovn.ASGet)
		ovnAS.POST("/:name", ovn.ASUpdate)
		ovnAS.DELETE("/:name", ovn.ASDel)
		ovnAS.GET("", ovn.ASList)
	}

	ovnLR := g.Group("/api/v1/esix/ovn/LR")
	ovnLR.Use(middleware.AuthMiddleware())
	{
		ovnLR.PUT("/:name", ovn.LRAdd)
		ovnLR.DELETE("/:name", ovn.LRDel)
		ovnLR.GET("/:name", ovn.LRGet)
		ovnLR.GET("", ovn.LRList)
	}

	ovnLRP := g.Group("/api/v1/esix/ovn/LRP")
	ovnLRP.Use(middleware.AuthMiddleware())
	{
		ovnLRP.PUT("/:name/:port", ovn.LRPAdd)
		ovnLRP.DELETE("/:name/:port", ovn.LRPDel)
		ovnLRP.GET("/:name", ovn.LRPList)
	}

	ovnLB := g.Group("/api/v1/esix/ovn/LB")
	ovnLB.Use(middleware.AuthMiddleware())
	{
		ovnLB.PUT("/:name", ovn.LBAdd)
		ovnLB.DELETE("/:name", ovn.LBDel)
		ovnLB.POST("/:name", ovn.LBUpdate)
		ovnLB.GET("/:name", ovn.LBGet)
	}

	ovnLRSR := g.Group("/api/v1/esix/ovn/LRSR")
	ovnLRSR.Use(middleware.AuthMiddleware())
	{
		ovnLRSR.PUT("/:name", ovn.LRSRAdd)
		ovnLRSR.DELETE("/:name", ovn.LRSRDel)
		ovnLRSR.GET("/:name", ovn.LRSRList)
	}

	ovnLRLB := g.Group("/api/v1/esix/ovn/LRLB")
	{
		ovnLRLB.PUT("/:name/:lb", ovn.LRLBAdd)
		ovnLRLB.DELETE("/:name/:lb", ovn.LRLBDel)
		ovnLRLB.GET("/:name", ovn.LRLBlist)
	}
	return g
}
