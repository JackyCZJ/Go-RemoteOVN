basePath: /api/v1
definitions:
  api.Bar:
    properties:
      field2:
        type: string
    type: object
  api.BarMap:
    additionalProperties:
      properties:
        field2:
          type: string
      type: object
    type: object
  api.Foo:
    properties:
      field1:
        type: string
    type: object
  api.FooBar:
    properties:
      field1:
        type: string
      field2:
        type: string
    type: object
  api.FooBarPointer:
    properties:
      field1:
        type: string
      field2:
        type: string
      message:
        type: string
    type: object
  api.SwagReturn:
    items:
      additionalProperties: {}
      type: object
    type: array
  controller.Message:
    properties:
      message:
        example: message
        type: string
    type: object
  cross.Cross:
    properties:
      array:
        items:
          type: string
        type: array
      string:
        type: string
    type: object
  data.Foo:
    properties:
      field1:
        type: string
    type: object
  data.TimeContainer:
    properties:
      created_at:
        type: string
      name:
        type: string
      timestamp:
        type: string
    type: object
  handler.Response:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  model.Account:
    properties:
      id:
        example: 1
        format: int64
        type: integer
      name:
        example: account name
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
    type: object
  model.AddAccount:
    properties:
      name:
        example: account name
        type: string
    type: object
  model.Admin:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: admin name
        type: string
    type: object
  model.Bottle:
    properties:
      account:
        $ref: '#/definitions/model.Account'
        type: object
      id:
        example: 1
        type: integer
      name:
        example: bottle_name
        type: string
    type: object
  model.UpdateAccount:
    properties:
      name:
        example: account name
        type: string
    type: object
  model.UserInfo:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      sayHello:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  model.UserModel:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  user.CreateRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.CreateResponse:
    properties:
      username:
        type: string
    type: object
  user.ListRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      username:
        type: string
    type: object
  user.SwaggerListResponse:
    properties:
      totalCount:
        type: integer
      userList:
        items:
          $ref: '#/definitions/model.UserInfo'
        type: array
    type: object
  web.APIError:
    properties:
      createdAt:
        type: string
      errorCode:
        type: integer
      errorMessage:
        type: string
    type: object
  web.AnonymousStructArray:
    items:
      properties:
        foo:
          type: string
      type: object
    type: array
  web.CrossAlias:
    properties:
      array:
        items:
          type: string
        type: array
      string:
        type: string
    type: object
  web.IndirectRecursiveTest:
    properties:
      tags:
        items:
          $ref: '#/definitions/web.Tag'
        type: array
    type: object
  web.Pet:
    properties:
      birthday:
        type: integer
      category:
        properties:
          id:
            example: 1
            type: integer
          name:
            example: category_name
            type: string
          photoUrls:
            example:
            - http://test/image/1.jpg
            - http://test/image/2.jpg
            format: url
            items:
              type: string
            type: array
          smallCategory:
            properties:
              id:
                example: 1
                type: integer
              name:
                example: detail_category_name
                type: string
              photoUrls:
                example:
                - http://test/image/1.jpg
                - http://test/image/2.jpg
                items:
                  type: string
                type: array
            required:
            - name
            type: object
        type: object
      coeffs:
        items:
          type: number
        type: array
      customString:
        type: string
      customStringArr:
        items:
          type: string
        type: array
      data:
        type: object
      decimal:
        type: number
      id:
        example: 1
        format: int64
        type: integer
      isAlive:
        example: true
        type: boolean
      name:
        example: poti
        type: string
      nullInt:
        type: integer
      pets:
        items:
          $ref: '#/definitions/web.Pet2'
        type: array
      pets2:
        items:
          $ref: '#/definitions/web.Pet2'
        type: array
      photoUrls:
        example:
        - http://test/image/1.jpg
        - http://test/image/2.jpg
        items:
          type: string
        type: array
      price:
        example: 3.25
        type: number
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/web.Tag'
        type: array
      uuid:
        type: string
    required:
    - price
    type: object
  web.Pet2:
    properties:
      deletedAt:
        type: string
      id:
        type: integer
      middleName:
        type: string
    type: object
  web.Pet5a:
    properties:
      name:
        type: string
      odd:
        type: boolean
    required:
    - name
    - odd
    type: object
  web.Pet5b:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  web.Pet5c:
    properties:
      name:
        type: string
      odd:
        type: boolean
    required:
    - name
    - odd
    type: object
  web.Post:
    properties:
      data:
        description: Post data
        properties:
          name:
            description: Post tag
            items:
              type: string
            type: array
        type: object
      id:
        example: 1
        format: int64
        type: integer
      name:
        description: Post name
        example: poti
        type: string
    type: object
  web.RevValue:
    properties:
      data:
        type: integer
      err:
        type: integer
      status:
        type: boolean
    type: object
  web.Tag:
    properties:
      id:
        format: int64
        type: integer
      name:
        type: string
      pets:
        items:
          $ref: '#/definitions/web.Pet'
        type: array
    type: object
  web.Tags:
    items:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        pets:
          items:
            $ref: '#/definitions/web.Pet'
          type: array
      type: object
    type: array
host: localhost:8080
info:
  contact:
    name: Jacky
    url: http://git.esix.com/jackyczj/go-restfulovn
  description: OVN Remote API Server
  license: {}
  title: OVN Remote API Server
  version: "0.1"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: get accounts
      parameters:
      - description: name search by q
        format: email
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: List accounts
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: Add account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccount'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: Add a account
      tags:
      - accounts
  /accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by account ID
      parameters:
      - description: Account ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Account'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: Update a account
      tags:
      - accounts
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: Show a account
      tags:
      - accounts
    patch:
      consumes:
      - application/json
      description: Update by json account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAccount'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: Update a account
      tags:
      - accounts
  /accounts/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: account image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Message'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: Upload account image
      tags:
      - accounts
  /admin/auth:
    post:
      consumes:
      - application/json
      description: get admin info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Admin'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      security:
      - ApiKeyAuth: []
      summary: Auth admin
      tags:
      - accounts
      - admin
  /api/esix/ovn/LS:
    get:
      description: get Logical switch list
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{[ "uuid": "a6b50553-9366-45d6-9e62-37335144b6c3",
            "name": "test2", "ports": [], "load_balancer": null, "acls": [], "qos_rules":
            null, "dns_records": null, "other_config": null, "external_id": {} }]"}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Get List Of Logical switch
      tags:
      - Logical switch
  /api/esix/ovn/LsExt/{name}:
    delete:
      description: Delete extends ids form ls
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":nil"}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Ls Ext IDs Delete
      tags:
      - Logical switch
    put:
      description: add extends ids to ls
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":nil"}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Ls Ext IDs add
      tags:
      - Logical switch
  /api/esix/ovn/Lsp/{name}/{port}:
    delete:
      description: add Port to switch
      produces:
      - application/json
      summary: Add Port to a logical switch
      tags:
      - Logical switch Port
  /api/esix/ovn/Lsp/{port}:
    delete:
      description: Delete Port from its attached switch
      produces:
      - application/json
      summary: Delete Port from its attached switch
      tags:
      - Logical switch Port
  /api/v1/esix/ovn/LS/{name}:
    delete:
      description: Delete a Logical switch
      parameters:
      - description: Logical Switch Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":nil"}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Delete Logical switch
      tags:
      - Logical switch
    get:
      consumes:
      - application/json
      description: Get a Logical switch
      parameters:
      - description: Logical Switch Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data": { "uuid": "a6b50553-9366-45d6-9e62-37335144b6c3",
            "name": "test2", "ports": [], "load_balancer": null, "acls": [], "qos_rules":
            null, "dns_records": null, "other_config": null, "external_id": {}}"}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: GET Logical switch By name
      tags:
      - Logical switch
    put:
      description: Add new Logical switch
      parameters:
      - description: Logical Switch Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":nil"}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Add new Logical switch
      tags:
      - Logical switch
  /bottles:
    get:
      consumes:
      - application/json
      description: get bottles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Bottle'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: List bottles
      tags:
      - bottles
  /bottles/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      operationId: get-string-by-int
      parameters:
      - description: Bottle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Bottle'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
            type: object
      summary: Show a bottle
      tags:
      - bottles
  /examples/attribute:
    get:
      consumes:
      - application/json
      description: attribute
      parameters:
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      - description: int enums
        enum:
        - 1
        - 2
        - 3
        in: query
        name: enumint
        type: integer
      - description: int enums
        enum:
        - 1.1
        - 1.2
        - 1.3
        in: query
        name: enumnumber
        type: number
      - description: string valid
        in: query
        maxLength: 10
        minLength: 5
        name: string
        type: string
      - description: int valid
        in: query
        maximum: 10
        minimum: 1
        name: int
        type: integer
      - default: A
        description: string default
        in: query
        name: default
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: attribute example
      tags:
      - example
  /examples/calc:
    get:
      consumes:
      - application/json
      description: plus
      parameters:
      - description: used for calc
        in: query
        name: val1
        required: true
        type: integer
      - description: used for calc
        in: query
        name: val2
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: integer
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: calc example
      tags:
      - example
  /examples/groups/{group_id}/accounts/{account_id}:
    get:
      consumes:
      - application/json
      description: path params
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: path params example
      tags:
      - example
  /examples/header:
    get:
      consumes:
      - application/json
      description: custome header
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: custome header example
      tags:
      - example
  /examples/ping:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /examples/securities:
    get:
      consumes:
      - application/json
      description: custome header
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Implicit:
        - admin
        - write
      summary: custome header example
      tags:
      - example
  /file/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      operationId: file.upload
      parameters:
      - description: this is a test file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: We need ID!!
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
        "401":
          description: Unauthorized
          schema:
            items:
              type: string
            type: array
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
      summary: Upload file
  /login:
    post:
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/string'
          type: object
      - description: Password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/string'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ"}}'
          schema:
            type: string
      summary: Login generates the authentication token
  /posts/{post_id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Some ID
        format: int64
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: We need ID!!
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
      summary: Add a new pet to the store
  /sd/cpu:
    get:
      consumes:
      - application/json
      description: Checks the cpu usage
      produces:
      - application/json
      responses:
        "200":
          description: 'CRITICAL - Load average: 1.78, 1.99, 2.02 | Cores: 2'
          schema:
            type: string
      summary: Checks the cpu usage
      tags:
      - sd
  /sd/disk:
    get:
      consumes:
      - application/json
      description: Checks the disk usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 17233MB (16GB) / 51200MB (50GB) | Used: 33%'
          schema:
            type: string
      summary: Checks the disk usage
      tags:
      - sd
  /sd/health:
    get:
      consumes:
      - application/json
      description: Shows OK as the ping-pong result
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Shows OK as the ping-pong result
      tags:
      - sd
  /sd/ram:
    get:
      consumes:
      - application/json
      description: Checks the ram usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 402MB (0GB) / 8192MB (8GB) | Used: 4%'
          schema:
            type: string
      summary: Checks the ram usage
      tags:
      - sd
  /test:
    get:
      description: This belongs to the operation, not the general API!
      summary: test op
  /testapi/get-bar:
    get:
      consumes:
      - application/json
      description: get Bar
      operationId: get-bar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Bar'
            type: object
  /testapi/get-barmap:
    get:
      consumes:
      - application/json
      description: get BarMap
      operationId: get-bar-map
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.BarMap'
            type: object
  /testapi/get-foo:
    get:
      consumes:
      - application/json
      description: get Foo
      operationId: get-foo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Foo'
            type: object
  /testapi/get-foobar:
    get:
      consumes:
      - application/json
      description: get FooBar
      operationId: get-foobar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.FooBar'
            type: object
  /testapi/get-foobar-pointer:
    get:
      consumes:
      - application/json
      description: get FooBarPointer
      operationId: get-foobar-pointer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.FooBarPointer'
            type: object
  /testapi/get-string-by-int/{some_id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      operationId: get-string-by-int
      parameters:
      - description: Some ID
        format: int64
        in: path
        name: some_id
        required: true
        type: integer
      - description: Some ID
        in: body
        name: some_id
        required: true
        schema:
          $ref: '#/definitions/web.Pet'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: We need ID!!
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
      summary: Add a new pet to the store
  /testapi/get-struct-array-by-string/{some_id}:
    get:
      consumes:
      - application/json
      description: get struct array by ID
      operationId: get-struct-array-by-string
      parameters:
      - description: Some ID
        in: path
        name: some_id
        required: true
        type: string
      - description: Category
        enum:
        - 1
        - 2
        - 3
        in: query
        name: category
        required: true
        type: integer
      - default: 0
        description: Offset
        in: query
        minimum: 0
        name: offset
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        maximum: 50
        name: limit
        required: true
        type: integer
      - default: '""'
        description: q
        in: query
        maxLength: 50
        minLength: 1
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: We need ID!!
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/web.APIError'
            type: object
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      - OAuth2Application:
        - write
      - OAuth2Implicit:
        - read
        - admin
      - OAuth2AccessCode:
        - read
      - OAuth2Password:
        - admin
  /testapi/time-as-time-container:
    get:
      consumes:
      - application/json
      description: test container with time and time alias
      operationId: time-as-time-container
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/data.TimeContainer'
            type: object
      summary: Get container with time and time alias
  /user:
    get:
      consumes:
      - application/json
      description: List users
      parameters:
      - description: List users
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.ListRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"userList":[{"id":0,"username":"admin","random":"user
            ''admin'' get random string ''EnqntiSig''","password":"$2a$10$veGcArz47VGj7l9xN7g2iuT9TF21jLI1YGXarGzvARNdnt4inC9PG","createdAt":"2018-05-28
            00:25:33","updatedAt":"2018-05-28 00:25:33"}]}}'
          schema:
            $ref: '#/definitions/user.SwaggerListResponse'
            type: object
      summary: List the users in the database
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Create a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/user.CreateResponse'
            type: object
      summary: Add new user to the database
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Delete an user by the user identifier
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      - description: The user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserModel'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/handler.Response'
            type: object
      summary: Update a user info by the user identifier
      tags:
      - user
  /user/{username}:
    get:
      consumes:
      - application/json
      description: Get an user by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong","password":"$2a$10$E0kwtmtLZbwW/bDQ8qI8e.eHPqhQOW9tvjwpyo/p05f/f4Qvr3OmS"}}'
          schema:
            $ref: '#/definitions/model.UserModel'
            type: object
      summary: Get an user by the user identifier
      tags:
      - user
swagger: "2.0"
